#!/home/kiankr/PycharmProjects/Blog_project/venv/bin/python

import doctest
import sys
import os

sys.path.insert(0, os.getcwd() + os.sep + ".")
sys.path.insert(0, os.getcwd() + os.sep + "..")

from meds.scheduler import Scheduler
from meds.launcher import Launcher
from meds.bots.test import TestBot
from meds.object import Object
from meds.kernel import Kernel
from meds.event import Event

from meds.utils.cli import parse_cli, shutdown
from meds.utils.name import sname
from meds.log import loglevel
from meds.utils.join import j

from meds.core import cfg, fleet, kernel, launcher

import logging
import time

#flags = doctest.ELLIPSIS | doctest.REPORT_ONLY_FIRST_FAILURE | doctest.NORMALIZE_WHITESPACE
flags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE

parse_cli()
loglevel(cfg.loglevel or "error")
cfg.workdir = "doctest.data" 
kernel.boot()

scheduler = Scheduler()
event = Event()
event.test = 'ok'
o = Object()

bot = TestBot()
bot.start()


for top, *mods in os.walk("./doctests"):
     for flist in mods:
         for fn in sorted(flist):
             fnn = j(top, fn)
             if fnn.endswith(".rst"):
                 logging.info(fnn)
                 doctest.testfile(fnn,
                                  module_relative=False, 
                                  globs={
                                             'Event': Event,
                                             'Launcher': Launcher,
                                             'Object': Object,
                                             'bot': bot,
                                             'cfg': cfg,
                                             'event': event,
                                             'kernel': kernel,
                                             'scheduler': scheduler,
                                             'launcher': launcher,
                                             'obj': o,
                                         }, 
                                  raise_on_error=False,
                                  report=False,
                                  optionflags=flags)

for top, *mods in os.walk("meds"):
     for flist in mods:
         for fn in sorted(flist):
             fnn = j(top, fn)
             if fnn.endswith(".py"):
                 logging.info(fnn)
                 doctest.testfile(fnn, module_relative=False, 
                                       raise_on_error=False,
                                       globs={
                                                 'Event': Event,
                                                 'Launcher': Launcher,
                                                 'Object': Object,
                                                 'bot': bot,
                                                 'cfg': cfg,
                                                 'event': event,
                                                 'kernel': kernel,
                                                 'scheduler': scheduler,
                                                 'launcher': launcher,
                                                 'obj': o, 
                                              }, 
                                        optionflags=flags)

bot.stop()
kernel.shutdown()
shutdown()